datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
hashedPassword String?
  accounts      Account[]
  role Role @default(USER)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playLists PlayList[]
  reviews Review[]
}
 enum Role{
    USER
    ADMIN
 }
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
model PlayList{
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  title String
  artist String
  genre String 
  album String 
  releasedYear String
  description String
  images ImageType[]
  likes Int
 reviews Review[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
type ImageType{
  url String
}
 
 model Review{
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  playListId String @db.ObjectId
  rating Int
  comment String
  createdDate DateTime @default(now())
  playList PlayList @relation(fields: [playListId],references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }
